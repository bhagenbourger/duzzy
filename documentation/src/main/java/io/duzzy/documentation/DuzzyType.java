package io.duzzy.documentation;

public enum DuzzyType {
  DUZZY_CONFIG(
      "DuzzyConfig",
      """
          A `DuzzyConfig` is a yaml file \
          that enables you to specify some configurations for `Duzzy` and composed to:
           - `enricher` : an enricher is a component \
           that enables field improvement by specifying which `provider` to use for generate data.
           - `sink` : a sink is a component \
           that enables to specify where and in which format \
           (via a `serializer`) data are written."""
  ),
  DUZZY_SCHEMA(
      "DuzzySchema",
      """
          A `DuzzySchema` is a yaml file that enables you to specify the schema for generated data.
          
          A `DuzzySchema` is a list of `Field`.
          
          A `Field` is composed of:
           - `name`: the name of the field
           - `type`: the type of the field
           - `nullRate`: the rate of null values (0 means not null)
           - `corruptedRate`: the rate of corrupted values (0 means no corrupted value), \
           a corrupted value is a value that not match field constraint or field type \
           (only if sink hasn't schema)
           - `providers`: a list of providers used to generate data for the `Field`"""
  ),
  PARSER(
      "Parser",
      """
          A `parser`is a component that parses the input schema and produces a `DuzzySchema` \
          by combining the input schema and duzzy config."""
  ),
  ENRICHER(
      "Enricher",
      """
          An enricher is a component that enables field improvement by specifying which provider \
          to use for generate data.
          
          An enricher is composed of:
          - query selector: a query selector is a component that enables to specify which field \
          to improve and it is formatted like that key=value. \
          For example, to select a field named city, you have to use name=city. \
          Another example, to select all fields of type STRING, you have to use type=STRING.
          - provider identifier: a provider identifier corresponds to the fully qualified name \
          of the provider to use to improve the field. \
          For example, to use a AlphanumericRandomProvider, \
          you have to use io.duzzy.plugin.provider.random.AlphanumericRandomProvider.
          - provider parameters: a provider parameters is a map of parameters used to \
          configure the provider. \
          For example, to use a AlphanumericRandomProvider with a max length of 10, \
          you have to use max_length: 10."""
  ),
  FIELD(
      "Field",
      """
          A Field is composed of:
          - name: the name of the field
          - type: the type of the field
          - nullRate: the rate of null values (0 means not null)
          - corruptedRate: the rate of corrupted values (0 means no corrupted value), \
          a corrupted value is a value that not match field constraint \
          or field type (only if sink hasn't schema)
          - providers: a list of providers used to generate data for the Field"""
  ),
  PROVIDER(
      "Provider",
      """
          A provider is a component responsible for generating value. \
          
          Data generated by a provider has always the same type but can be valid or corrupted."""
  ),
  SINK(
      "Sink",
      """
          A sink is a component that enables to specify where and in which format \
          (via a serializer) data are written.
          
          Before writing data, a sink delegates data formatting to a serializer."""
  ),
  SERIALIZER(
      "Serializer",
      "A serializer is a component that enables to specify how data are formatted."
  ),
  UNKNOWN(
      "Unknown",
      "An unknown type, used when the type is not recognized."
  );

  private final String title;
  private final String description;

  DuzzyType(String title, String description) {
    this.title = title;
    this.description = description;
  }

  public String getTitle() {
    return title;
  }

  public String getDescription() {
    return description;
  }
}
