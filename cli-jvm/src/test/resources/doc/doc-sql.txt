# Duzzy components

## Parser
A `parser`is a component that parses the input schema and produces a `DuzzySchema` by combining the input schema and duzzy config.

### io.duzzy.plugin.parser.SqlParser ♨️ 🧬  
🔑 Identifier: io.duzzy.plugin.parser.SqlParser  
📋 Description: SQL parser: parse SQL schema to DuzzySchema  
📦 Module: io.duzzy.core  
🧬 Native support: true

## Provider
A provider is a component responsible for generating value. 
Data generated by a provider has always the same type but can be valid or corrupted.

### io.duzzy.plugin.provider.constant.SqlDateConstantProvider ♨️ 🧬  
🔑 Identifier: io.duzzy.plugin.provider.constant.SqlDateConstantProvider  
📋 Description: Provide a java.sql.Date constant value  
📦 Module: io.duzzy.core  
🧬 Native support: true  

⚙️ Parameters: 

| Name | Aliases | Description | Default value |
| --- | --- | --- | --- |
| value |  | The constant value, must be a java.sql.Date |  |  

💡 Example: 
```
---
identifier: "io.duzzy.plugin.provider.constant.SqlDateConstantProvider"
value: "2023-01-01"
```

### io.duzzy.plugin.provider.constant.SqlTimeConstantProvider ♨️ 🧬  
🔑 Identifier: io.duzzy.plugin.provider.constant.SqlTimeConstantProvider  
📋 Description: Provide a java.sql.Time constant value  
📦 Module: io.duzzy.core  
🧬 Native support: true  

⚙️ Parameters: 

| Name | Aliases | Description | Default value |
| --- | --- | --- | --- |
| value |  | The constant value, must be a java.sql.Time |  |  

💡 Example: 
```
---
identifier: "io.duzzy.plugin.provider.constant.SqlTimeConstantProvider"
value: "12:30:00"
```

### io.duzzy.plugin.provider.increment.SqlDateIncrementProvider ♨️ 🧬  
🔑 Identifier: io.duzzy.plugin.provider.increment.SqlDateIncrementProvider  
📋 Description: Provide a sql date value that increments by a step  
📦 Module: io.duzzy.core  
🧬 Native support: true  

⚙️ Parameters: 

| Name | Aliases | Description | Default value |
| --- | --- | --- | --- |
| start |  | The starting value, defaults to current date | now(UTC) |
| step |  | The step value, defaults to 1 | 1 |
| unit |  | The unit of increment (DAYS, WEEKS, MONTHS, YEARS), defaults to DAYS | DAYS |  

💡 Example: 
```
---
identifier: "io.duzzy.plugin.provider.increment.SqlDateIncrementProvider"
start: "2023-01-01"
step: 1
unit: DAYS
```

### io.duzzy.plugin.provider.increment.SqlTimeIncrementProvider ♨️ 🧬  
🔑 Identifier: io.duzzy.plugin.provider.increment.SqlTimeIncrementProvider  
📋 Description: Provide a sql time value that increments by a step  
📦 Module: io.duzzy.core  
🧬 Native support: true  

⚙️ Parameters: 

| Name | Aliases | Description | Default value |
| --- | --- | --- | --- |
| start |  | The starting value, defaults to current local time | now(UTC) |
| step |  | The step value, defaults to 1 | 1 |
| unit |  | The unit of increment (SECONDS, MINUTES, HOURS), defaults to SECONDS | SECONDS |  

💡 Example: 
```
---
identifier: "io.duzzy.plugin.provider.increment.SqlTimeIncrementProvider"
start: "00:00:00"
step: 1
unit: HOURS
```

### io.duzzy.plugin.provider.random.SqlDateRandomProvider ♨️ 🧬  
🔑 Identifier: io.duzzy.plugin.provider.random.SqlDateRandomProvider  
📋 Description: Provide a random java.sql.Date value  
📦 Module: io.duzzy.core  
🧬 Native support: true  

⚙️ Parameters: 

| Name | Aliases | Description | Default value |
| --- | --- | --- | --- |
| min |  | The minimum date, inclusive | 1970-01-01 |
| max |  | The maximum date, exclusive | 2100-12-31 |  

💡 Example: 
```
---
identifier: "io.duzzy.plugin.provider.random.SqlDateRandomProvider"
min: "2020-01-01"
max: "2021-01-01"
```

### io.duzzy.plugin.provider.random.SqlTimeRandomProvider ♨️ 🧬  
🔑 Identifier: io.duzzy.plugin.provider.random.SqlTimeRandomProvider  
📋 Description: Provide a random java.sql.Time value  
📦 Module: io.duzzy.core  
🧬 Native support: true  

⚙️ Parameters: 

| Name | Aliases | Description | Default value |
| --- | --- | --- | --- |
| min |  | The minimum time, inclusive | 00:00:00 |
| max |  | The maximum time, exclusive | 23:59:59 |  

💡 Example: 
```
---
identifier: "io.duzzy.plugin.provider.random.SqlTimeRandomProvider"
min: "10:00:00"
max: "11:00:00"
```

## Sink
A sink is a component that enables to specify where and in which format (via a serializer) data are written.

Before writing data, a sink delegates data formatting to a serializer.

### io.duzzy.plugin.sink.MysqlSink ♨️ 🧬  
🔑 Identifier: io.duzzy.plugin.sink.MysqlSink  
📋 Description: Sink data to a MySQL database  
📦 Module: io.duzzy.plugin-mysql  
🧬 Native support: true  

⚙️ Parameters: 

| Name | Aliases | Description | Default value |
| --- | --- | --- | --- |
| serializer |  | The serializer to use |  |
| url |  | The JDBC URL |  |
| user |  | The user |  |
| password |  | The password |  |
| fail_on_error | failOnError, fail-on-error | Whether to fail on error |  |  

💡 Example: 
```
---
sink:
  identifier: "io.duzzy.plugin.sink.MysqlSink"
  serializer:
    identifier: "io.duzzy.plugin.serializer.SqlSerializer"
    table_name: "my_table"
  url: "jdbc:mysql://localhost:3306/my_database"
  user: "user"
  password: "password"
  fail_on_error: true
```

### io.duzzy.plugin.sink.PostgresqlSink ♨️ 🧬  
🔑 Identifier: io.duzzy.plugin.sink.PostgresqlSink  
📋 Description: Sink data to a PostgreSQL database  
📦 Module: io.duzzy.plugin-postgresql  
🧬 Native support: true  

⚙️ Parameters: 

| Name | Aliases | Description | Default value |
| --- | --- | --- | --- |
| serializer |  | The serializer to use |  |
| url |  | The JDBC URL |  |
| user |  | The user |  |
| password |  | The password |  |
| fail_on_error | failOnError, fail-on-error | Whether to fail on error |  |  

💡 Example: 
```
---
sink:
  identifier: "io.duzzy.plugin.sink.PostgresqlSink"
  serializer:
    identifier: "io.duzzy.plugin.serializer.SqlSerializer"
    table_name: "my_table"
  url: "jdbc:postgresql://localhost:5432/my_database"
  user: "user"
  password: "password"
  fail_on_error: true
```

## Serializer
A serializer is a component that enables to specify how data are formatted.

### io.duzzy.plugin.serializer.SqlSerializer ♨️ 🧬  
🔑 Identifier: io.duzzy.plugin.serializer.SqlSerializer  
📋 Description: Serialize data in SQL  
📦 Module: io.duzzy.core  
🧬 Native support: true  

⚙️ Parameters: 

| Name | Aliases | Description | Default value |
| --- | --- | --- | --- |
| table_name | tableName, table-name | The name of the table to insert data |  |  

💡 Example: 
```
---
sink:
  identifier: "io.duzzy.plugin.sink.ConsoleSink"
  serializer:
    identifier: "io.duzzy.plugin.serializer.SqlSerializer"
    table_name: "my_table"
```
